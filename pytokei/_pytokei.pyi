class Config:
    def __init__(self) -> None: ...
    @property
    def columns(self) -> int: ...
    @property
    def hidden(self) -> bool: ...
    @property
    def no_ignore(self) -> bool: ...
    @property
    def no_ignore_parent(self) -> bool: ...
    @property
    def no_ignore_dot(self) -> bool: ...
    @property
    def no_ignore_vcs(self) -> bool: ...
    @property
    def treat_doc_strings_as_comments(self) -> bool: ...
    @staticmethod
    def from_config_files() -> Config: ...
    def __repr__(self) -> str: ...

class Language:
    def __init__(self) -> None: ...
    @property
    def blanks(self) -> int: ...
    @property
    def code(self) -> int: ...
    @property
    def comments(self) -> int: ...
    @property
    def reports(self) -> list[Report]: ...
    def reports_plain(self) -> list[dict[str, dict[str, int]]]: ...
    @property
    def children(self) -> dict[LanguageType, list[Report]]: ...
    def children_plain(self) -> dict[str, list[dict[str, dict[str, int]]]]: ...
    @property
    def innacurate(self) -> bool: ...
    def lines(self) -> int: ...
    def add_report(self, report: Report) -> int: ...
    def summarise(self) -> Language: ...
    def total(self) -> None: ...
    def sort_by(self, category: Sort) -> None: ...
    def __repr__(self) -> str: ...

class LanguageType:
    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def name(self) -> str: ...
    # @staticmethod
    # def list() -> list[str]: ...  # How should this be typed??
    def is_literate(self) -> bool: ...
    def line_comments(self) -> list[str]: ...
    def multi_line_comments(self) -> list[tuple[str]]: ...
    def allows_nested(self) -> bool: ...
    def nested_comments(self) -> list[tuple[str]]: ...
    def quotes(self) -> list[tuple[str]]: ...
    def verbatim_quotes(self) -> list[tuple[str]]: ...
    def doc_quotes(self) -> list[tuple[str]]: ...
    def shebangs(self) -> list[str]: ...
    def important_syntax(self) -> list[str]: ...

class Languages:
    def __init__(self) -> None: ...
    def get_statistics(
        self, paths: list[str], ignored: list[str], config: Config
    ) -> None: ...
    def total(self) -> Language: ...
    def language_names(self) -> Language: ...
    def __getitem__(self, lang_type: LanguageType) -> Language | ValueError: ...
    def get_languages(self) -> dict[LanguageType, Language]: ...

class Sort:
    def __init__(self) -> None: ...
    @staticmethod
    def from_str(s: str) -> Sort | ValueError: ...
    def __repr__(self) -> str: ...

def sort_types() -> list[str]: ...

class CodeStats:
    def __init__(self) -> None: ...
    @property
    def blanks(self) -> int: ...
    @property
    def code(self) -> int: ...
    @property
    def comments(self) -> int: ...
    @property
    def blobs(self) -> dict[LanguageType, CodeStats]: ...
    @property
    def blobs_plain(self) -> dict[str, dict[str, int]]: ...
    def lines(self) -> int: ...
    def summarise(self) -> CodeStats: ...
    def plain(self) -> dict[str, int]: ...
    def __repr__(self) -> str: ...

class Report:
    def __init__(self) -> None: ...
    @property
    def name(str) -> str: ...
    @property
    def stats(str) -> CodeStats: ...
    def __repr__(self) -> str: ...
    def plain(self) -> dict[str, dict[str, int]]: ...
